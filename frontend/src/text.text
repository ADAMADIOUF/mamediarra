import React, { useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import {
  setPriceRange,
  setCategory,
  setRating,
  setSortOption,
  clearFilters,
} from '../features/productFilterSlice'
import { Link } from 'react-router-dom'
import { FaTh, FaThList } from 'react-icons/fa' 


const HomeProducts = () => {
  const dispatch = useDispatch()
  const filteredProducts = useSelector(
    (state) => state.products.filteredProducts
  )
  const filters = useSelector((state) => state.products.filters)
  const [sortOption, setSortOptionState] = useState('')
  const [isGrid2Row, setIsGrid2Row] = useState(true) 
  
  const inStockCount = filteredProducts.filter(
    (product) => product.countInStock > 0
  ).length
  const outOfStockCount = filteredProducts.filter(
    (product) => product.countInStock === 0
  ).length

  
  const maxPrice =
    Math.max(...filteredProducts.map((product) => product.price)) || 0

  const sortedFilteredProducts = () => {
    let sortedProducts = [...filteredProducts]

    if (sortOption === 'priceLowToHigh') {
      sortedProducts.sort((a, b) => a.price - b.price)
    } else if (sortOption === 'priceHighToLow') {
      sortedProducts.sort((a, b) => b.price - a.price)
    } else if (sortOption === 'aToZ') {
      sortedProducts.sort((a, b) => a.name.localeCompare(b.name))
    } else if (sortOption === 'zToA') {
      sortedProducts.sort((a, b) => b.name.localeCompare(a.name))
    }

    const { min, max } = filters.priceRange
    sortedProducts = sortedProducts.filter(
      (product) => product.price >= min && product.price <= max
    )

    return sortedProducts
  }

  const productsToDisplay = sortedFilteredProducts()

  return (
    <div className='shop'>
      <div className='bg-shop'>
        <Link to={'/'}>Home</Link>
      </div>
      <div className='container-shop-one'>
        <div>
          <div className='shop-grid'>
            <article>
              <h3>Availability</h3>
              <p>
                In stock: <span className='inStock-bg'>{inStockCount}</span>
              </p>
              <p>
                Out of stock:{' '}
                <span className='outStock-bg'>{outOfStockCount}</span>
              </p>
            </article>
          </div>
        </div>
        <div>
          <article>
            <h3>Display as</h3>
            <button onClick={() => setIsGrid2Row(true)} className='grid-one'>
              <FaThList />
            </button>
            <button onClick={() => setIsGrid2Row(false)} className='grid-two'>
              <FaTh />
            </button>
          </article>
        </div>
        <div>
          <article>
            <label>
              Sort by:
              <select
                onChange={(e) => {
                  setSortOptionState(e.target.value)
                  dispatch(setSortOption(e.target.value))
                }}
              >
                <option value=''>Default</option>
                <option value='priceLowToHigh'>Price: Low to High</option>
                <option value='priceHighToLow'>Price: High to Low</option>
                <option value='aToZ'>A to Z</option>
                <option value='zToA'>Z to A</option>
              </select>
            </label>
          </article>
        </div>
      </div>
      <div className='container-shop'>
        <article>
          <h4>Filter by Price</h4>
          <p>The maximum price is ${maxPrice.toFixed(2)}</p>
          <label>
            From $
            <input
              type='number'
              value={filters.priceRange.min}
              onChange={(e) =>
                dispatch(
                  setPriceRange({
                    ...filters.priceRange,
                    min: parseFloat(e.target.value) || 0,
                  })
                )
              }
            />
          </label>
          <label>
            To $
            <input
              type='number'
              value={filters.priceRange.max}
              onChange={(e) =>
                dispatch(
                  setPriceRange({
                    ...filters.priceRange,
                    max: parseFloat(e.target.value) || maxPrice,
                  })
                )
              }
            />
          </label>
          <button onClick={() => dispatch(clearFilters())}>Clear All</button>
        </article>
        <article>
          <h4>Filter by Category</h4>
          <label>
            Category:
            <select onChange={(e) => dispatch(setCategory(e.target.value))}>
              <option value=''>All Categories</option>
              <option value='Kids'>Kids</option>
              <option value='Women'>Women</option>
              <option value='Men'>Men</option>
              <option value='Beauty'>Beauty</option>
              <option value='Home'>Home</option>
            </select>
          </label>
        </article>
        <article>
          <h4>Filter by Rating</h4>
          <label>
            Minimum Rating:
            <select
              onChange={(e) => dispatch(setRating(parseFloat(e.target.value)))}
            >
              <option value='0'>All Ratings</option>
              <option value='1'>1 Star & Up</option>
              <option value='2'>2 Stars & Up</option>
              <option value='3'>3 Stars & Up</option>
              <option value='4'>4 Stars & Up</option>
              <option value='5'>5 Stars</option>
            </select>
          </label>
        </article>
        <article>
          <h4>Products</h4>
          <div
            className={`product-list ${
              isGrid2Row ? 'grid-2-row' : 'grid-3-row'
            }`}
          >
            {productsToDisplay.map((product) => (
              <div key={product.id} className='product-item'>
                <img src={product.images[0]} alt='' />
                <h5>{product.name}</h5>
                <p>Price: ${product.price.toFixed(2)}</p>
                <p>Rating: {product.rating} Stars</p>
                <p>{product.description}</p>
                <p>{product.countInStock > 0 ? 'In Stock' : 'Out of Stock'}</p>
              </div>
            ))}
          </div>
        </article>
      </div>
    </div>
  )
}

export default HomeProducts
